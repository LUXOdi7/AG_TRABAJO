"""
Script de verificaci√≥n para comprobar dependencias y funciones
"""

import sys
import os

def verificar_dependencias():
    """Verificar que todas las dependencias est√©n instaladas"""
    dependencias = [
        ('numpy', 'np'),
        ('matplotlib.pyplot', 'plt'),
        ('seaborn', 'sns'),
        ('pandas', 'pd'),
        ('scipy', None)
    ]
    
    print("üîç VERIFICANDO DEPENDENCIAS")
    print("-" * 25)
    
    dependencias_ok = True
    
    for dep, alias in dependencias:
        try:
            if alias:
                exec(f"import {dep} as {alias}")
            else:
                exec(f"import {dep}")
            print(f"‚úì {dep}")
        except ImportError as e:
            print(f"‚ùå {dep} - Error: {e}")
            dependencias_ok = False
    
    return dependencias_ok

def verificar_funciones():
    """Verificar que todas las funciones est√©n definidas"""
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    print("\nüîç VERIFICANDO FUNCIONES TSP_GA")
    print("-" * 30)
    
    try:
        from TSP_GA import (
            # Funciones b√°sicas
            get_distance_from_matrix,
            get_total_distance,
            create_individual,
            evaluate_fitness,
            crossover,
            mutate,
            select_parents,
            genetic_algorithm,
            
            # Funciones de visualizaci√≥n
            plot_solution,
            plot_evolution,
            plot_distance_histograms,
            
            # Funciones de an√°lisis avanzado
            analyze_fitness_evolution,
            calculate_genetic_diversity,
            plot_genetic_diversity_evolution,
            create_exploration_exploitation_plot,
            create_fitness_distribution_animation,
            compare_algorithm_performance,
            analyze_parameter_sensitivity,
            generate_final_report,
            
            # Datos
            CITIES,
            CITY_NAMES,
            DISTANCES_MATRIX,
            NUM_CITIES,
            POPULATION_SIZE,
            GENERATIONS,
            MUTATION_PROBABILITY,
            ELITISM_COUNT
        )
        
        print("‚úì Todas las funciones principales")
        print("‚úì Todas las funciones de an√°lisis avanzado")
        print("‚úì Todas las variables globales")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error al importar funciones: {e}")
        return False

def verificar_analysis_tsp():
    """Verificar funciones de analysis_tsp.py"""
    print("\nüîç VERIFICANDO AN√ÅLISIS AVANZADO")
    print("-" * 28)
    
    try:
        from analysis_tsp import TSPAnalyzer, TSPAlgorithms
        print("‚úì Clase TSPAnalyzer")
        print("‚úì Clase TSPAlgorithms")
        return True
    except ImportError as e:
        print(f"‚ö†Ô∏è analysis_tsp.py no disponible: {e}")
        print("  (Esto es opcional para el an√°lisis b√°sico)")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üß™ VERIFICACI√ìN DEL SISTEMA DE AN√ÅLISIS TSP")
    print("=" * 45)
    
    # Verificar dependencias
    deps_ok = verificar_dependencias()
    
    # Verificar funciones principales
    funcs_ok = verificar_funciones()
    
    # Verificar an√°lisis avanzado (opcional)
    analysis_ok = verificar_analysis_tsp()
    
    print("\nüìã RESUMEN DE VERIFICACI√ìN")
    print("-" * 25)
    
    if deps_ok and funcs_ok:
        print("‚úÖ Sistema listo para ejecutar an√°lisis b√°sico")
        print("‚úÖ TSP_GA.py completamente funcional")
        
        if analysis_ok:
            print("‚úÖ An√°lisis avanzado disponible")
        else:
            print("‚ö†Ô∏è An√°lisis avanzado limitado")
        
        print("\nüöÄ COMANDOS RECOMENDADOS:")
        print("   python TSP_GA.py                    # An√°lisis completo")
        print("   python analisis_especifico.py       # An√°lisis selectivo")
        if analysis_ok:
            print("   python analysis_tsp.py              # An√°lisis avanzado separado")
            print("   python ejecutar_analisis_completo.py # Ambos an√°lisis")
        
    else:
        print("‚ùå Sistema no est√° listo")
        
        if not deps_ok:
            print("\nüîß Para instalar dependencias:")
            print("   pip install -r requirements.txt")
        
        if not funcs_ok:
            print("\nüîß Revisa el archivo TSP_GA.py")
    
    print(f"\nüìÅ Directorio de trabajo: {os.getcwd()}")
    print(f"üìÅ Carpeta de resultados: Resultados_TSP/")

if __name__ == "__main__":
    main()
